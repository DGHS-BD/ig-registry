trigger:
  - master

pr:
  - master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true
    architecture: 'x64'

- task: UseNode@1
  inputs:
    version: '18.x'
  displayName: 'Install Node.js'

# Legacy Python validation - keeping for backward compatibility
- task: PythonScript@0
  displayName: 'Test fhir-ig-list.json is valid JSON'
  inputs:
    scriptSource: 'inline'
    script: |
      import json
      
      f = open("fhir-ig-list.json","r")
      file_contents = f.read()
      print("File contents preview:")
      print(file_contents[:500] + "..." if len(file_contents) > 500 else file_contents)
      json_object = json.loads(file_contents)
      print("✅ fhir-ig-list.json is valid JSON")

- task: PythonScript@0
  displayName: 'Test all fhir-version fields are lists'
  inputs:
    scriptSource: 'inline'
    script: |
      import json

      def item_generator(json_input, lookup_key):
          if isinstance(json_input, dict):
              for k, v in json_input.items():
                  if k == lookup_key:
                      yield v
                  else:
                      yield from item_generator(v, lookup_key)
          elif isinstance(json_input, list):
              for item in json_input:
                  yield from item_generator(item, lookup_key)

      json_file = open("fhir-ig-list.json", "r")
      file_contents = json_file.read()
      jdata = json.loads(file_contents)

      fhir_version_count = 0
      for fhir_version in item_generator(jdata, "fhir-version"):
          fhir_version_count += 1
          if type(fhir_version) != list:
              raise Exception(f"fhir-version field has a non-list value: {fhir_version} (type: {type(fhir_version).__name__})")
      
      print(f"✅ All {fhir_version_count} fhir-version fields are lists")

# New comprehensive validation
- script: |
    echo "Getting changed files..."
    if [ "$(Build.Reason)" == "PullRequest" ]; then
      echo "Pull Request detected - comparing with target branch"
      git fetch origin $(System.PullRequest.TargetBranch)
      git diff --name-only HEAD origin/$(System.PullRequest.TargetBranch) | grep '\.json$' || echo "No JSON files changed"
    else
      echo "Push detected - comparing with previous commit"
      git diff --name-only HEAD~1 HEAD | grep '\.json$' || echo "No JSON files changed"
    fi > changed_files.txt
    
    echo "Changed JSON files:"
    cat changed_files.txt
    
    export CHANGED_FILES=$(cat changed_files.txt | tr '\n' ' ')
    echo "##vso[task.setvariable variable=changedFiles]$CHANGED_FILES"
  displayName: 'Get changed files'

- script: |
    if grep -q '\\u' *.json 2>/dev/null; then
      echo "❌ Error: Escaped Unicode characters found in JSON files"
      echo "Failing lines:"
      grep -n '\\u' *.json
      exit 1
    else
      echo "✅ No escaped Unicode characters found."
    fi
  displayName: 'Check for escaped Unicode characters'

- script: |
    echo "Running comprehensive validation..."
    echo "Changed files: $(changedFiles)"
    export CHANGED_FILES="$(changedFiles)"
    node validation.js
  displayName: 'Run comprehensive validation'
  env:
    CHANGED_FILES: $(changedFiles)